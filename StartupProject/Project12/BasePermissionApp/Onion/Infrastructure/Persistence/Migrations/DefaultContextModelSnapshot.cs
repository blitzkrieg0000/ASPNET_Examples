// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 496, DateTimeKind.Utc).AddTicks(9408),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SuperUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 496, DateTimeKind.Utc).AddTicks(9430),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 496, DateTimeKind.Utc).AddTicks(9443),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AccessFailedCount")
                        .HasColumnType("bigint")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("email_approved");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unspecified")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime>("LockoutEndDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end_date_utc");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_approved");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_end_date");

                    b.Property<DateTime>("SecurityStampDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("security_stamp_date");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0L,
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(6089),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "burakhansamli0.0.0.0@gmail.com",
                            EmailApproved = true,
                            IsPersistent = true,
                            LockoutEnabled = false,
                            LockoutEndDateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "root",
                            NormalizedName = "ROOT",
                            Password = "f3f5e898ed41cd8e0b3785bc5bba537deffe3889e525b30e72f947a27c2d2caf986f73663a308e97ba6f24323ce2929e6afe4b86204d93617c16000dd574a8e5",
                            PhoneNumberApproved = true,
                            SecurityStampDate = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(6066),
                            TwoFactorEnabled = true,
                            Username = "root"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0L,
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(6139),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailApproved = true,
                            IsPersistent = true,
                            LockoutEnabled = false,
                            LockoutEndDateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            Password = "99ec526fe3e3f956acb4712b6bca88d918a3eb6d3e0a17634667e2775aad07ec1f8f84f8bbbf227eb5e0574177b13c8c30cc71b2d8e9bda722c023a81b754601",
                            PhoneNumberApproved = true,
                            SecurityStampDate = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(6127),
                            TwoFactorEnabled = true,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserClaim", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfb94f63-4436-4668-83eb-bab186020cbd"),
                            Active = true,
                            ClaimType = "ProfilePhoto",
                            ClaimValue = "asset/image/user.png",
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(2302),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("dfbd781d-ad8c-42dd-a6c9-fb9a71c1b8ac"),
                            Active = true,
                            ClaimType = "ProfilePhoto",
                            ClaimValue = "asset/image/user.png",
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 497, DateTimeKind.Utc).AddTicks(2330),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLogin", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_ApplicationUserRole_role_id");

                    b.HasIndex(new[] { "UserId" }, "IX_ApplicationUserRole_user_id");

                    b.ToTable("ApplicationUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2912cbfc-ac43-4f5c-bee7-be017289b9c2"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 498, DateTimeKind.Utc).AddTicks(2849),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("9fdbeedc-027b-40d6-b4ab-ccf244da160c"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 7, 23, 6, 10, 498, DateTimeKind.Utc).AddTicks(2876),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserClaim", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("applicationuserclaim_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserLogin", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("applicationuserlogin_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("applicationuserrole_fk_1");

                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("applicationuserrole_fk");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserLogins");

                    b.Navigation("ApplicationUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
