// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UI.Contexts;

#nullable disable

namespace UI.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1669),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SuperUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1691),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1704),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1717),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1730),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1743),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HumanResources"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(1756),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(4611),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "burakhansamli0.0.0.0@gmail.com",
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "f3f5e898ed41cd8e0b3785bc5bba537deffe3889e525b30e72f947a27c2d2caf986f73663a308e97ba6f24323ce2929e6afe4b86204d93617c16000dd574a8e5",
                            Username = "root"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 667, DateTimeKind.Utc).AddTicks(4630),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "99ec526fe3e3f956acb4712b6bca88d918a3eb6d3e0a17634667e2775aad07ec1f8f84f8bbbf227eb5e0574177b13c8c30cc71b2d8e9bda722c023a81b754601",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_ApplicationUserRole_role_id");

                    b.HasIndex(new[] { "UserId" }, "IX_ApplicationUserRole_user_id");

                    b.ToTable("ApplicationUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bcacee8-d11d-4e6a-8247-ea68a70865e1"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 668, DateTimeKind.Utc).AddTicks(1107),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("64cf50bd-f0e0-4e02-8af8-ba6d52711755"),
                            Active = true,
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 668, DateTimeKind.Utc).AddTicks(1133),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = true,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EmployeeTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_type_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.EmployeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_role_id");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("EmployeeType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b44a2349-a5f4-44b3-9385-168d2ecfb638"),
                            Active = true,
                            ApplicationRoleId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 669, DateTimeKind.Utc).AddTicks(478),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = false,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("489a5c0e-ed90-4196-b73f-711d6910a4e7"),
                            Active = true,
                            ApplicationRoleId = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 669, DateTimeKind.Utc).AddTicks(495),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = false,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IT"
                        },
                        new
                        {
                            Id = new Guid("a7adfa94-43d8-44a7-a9ed-7480b37182d8"),
                            Active = true,
                            ApplicationRoleId = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 669, DateTimeKind.Utc).AddTicks(507),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = false,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HumanResources"
                        },
                        new
                        {
                            Id = new Guid("743d097a-bd28-4b77-b241-f681dae6e8fa"),
                            Active = true,
                            ApplicationRoleId = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedTime = new DateTime(2024, 2, 13, 12, 10, 9, 669, DateTimeKind.Utc).AddTicks(520),
                            DeletedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPersistent = false,
                            ModifiedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("UI.Entity.Concrete.Work.OffWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persistent");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_time");

                    b.Property<DateTime>("OffEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("off_end")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<DateTime>("OffStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("off_start")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<int>("TotalDayCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_day_count");

                    b.Property<int>("TotalWeekdayCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_weekday_count");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OffWork", (string)null);
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("UI.Entities.Auth.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("applicationuserrole_fk_1");

                    b.HasOne("UI.Entities.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("applicationuserrole_fk");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.Employee", b =>
                {
                    b.HasOne("UI.Entity.Concrete.Employee.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UI.Entities.Auth.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("UI.Entity.Concrete.Employee.Employee", "Id")
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.EmployeeType", b =>
                {
                    b.HasOne("UI.Entities.Auth.ApplicationRole", "ApplicationRole")
                        .WithMany("EmployeeTypes")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("UI.Entity.Concrete.Work.OffWork", b =>
                {
                    b.HasOne("UI.Entity.Concrete.Employee.Employee", "Employee")
                        .WithMany("OffWorks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("EmployeeTypes");
                });

            modelBuilder.Entity("UI.Entities.Auth.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.Employee", b =>
                {
                    b.Navigation("OffWorks");
                });

            modelBuilder.Entity("UI.Entity.Concrete.Employee.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
