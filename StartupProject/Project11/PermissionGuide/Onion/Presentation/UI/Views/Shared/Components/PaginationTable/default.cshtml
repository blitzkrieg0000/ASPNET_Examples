@model IPagedList<Dto>
@{
    var counter = -1;
    var actions = (string[]) ViewData["Actions"];
}

@functions {
    @* Model'in Property İsimlerini Html olarak return eder. *@
    public IHtmlContent GetPropNames()
    {
        return Html.Raw((string)ViewData["HeaderHtml"]);
    }

    @* Model'in Property Değerlerini Html olarak return eder. *@
    public IHtmlContent GetPropValues(int item)
    {
        var content_html = (String[]) ViewData["ContentHtml"];
        return Html.Raw($@"{content_html[item]}");
    }
}


@* Delete Button Modal *@
<div class="row">
    @{
        await Html.RenderPartialAsync("~/Views/Shared/PartialViews/_CustomModal.cshtml", new ViewDataDictionary(ViewData){
    {"modal_id", "actionModal"},
    {"modal_title", "Uyarı"},
    {"modal_body", "Devam etmek istediğinize emin misiniz?"},
    {"approve_button", "Onayla"},
    {"deny_button", "İptal"}
    });
    }

</div>


<form id="dataTableForm" method="post" autocomplete="off">
    <div class="row layout-spacing">
        <div class="col-lg-12">
            <div class="statbox widget box box-shadow">
                <div class="widget-content widget-content-area">
                    <table id="style-1" class="table style-1 dt-table-hover non-hover">
                        <thead>
                            <tr>
                                <th class="text-center dt-no-sorting">İşlem</th>
                                @GetPropNames()

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                counter++;
                                <tr>
                                    <td class="icon-content-container">
                                        <div class="row flex-nowrap">
                                            @if (actions.Any(x => x == "Detail"))
                                            {
                                                @* Detail Button *@
                                                <a class="col-auto px-1 m-1 btn btn-outline-secondary" asp-action="Detail" asp-route-id="@item.Id">
                                                    <div class="icon-container">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-card-heading" viewBox="0 0 16 16">
                                                            <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z" />
                                                            <path d="M3 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm0-5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-1z" />
                                                        </svg><span class="icon-name"></span>

                                                    </div>
                                                </a>
                                            }

                                            @if (actions.Any(x => x == "Remove"))
                                            {
                                            @* Remove Button *@
                                            <a type="button" class="col-auto px-1 m-1 btn btn-outline-danger" asp-action="Remove" asp-route-id="@item.Id" data-bs-toggle="modal" data-bs-target="#actionModal">
                                                <div class="icon-container">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                    </svg><span class="icon-name"></span>
                                                </div>
                                            </a>
                                            }

                                            @if (actions.Any(x => x == "Update"))
                                            {
                                            @* Update Button *@
                                            <a class="col-auto px-1 px-1 m-1 btn btn-outline-primary" asp-action="Update" asp-route-id="@item.Id">
                                                <div class="icon-container">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                                    </svg><span class="icon-name"></span>
                                                </div>
                                            </a>
                                            }

                                        </div>
                                    </td>

                                    @GetPropValues(counter)

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</form>


<div class="col-12 col-sm-6 d-flex justify-content-sm-end justify-content-center mt-sm-0 mt-3">
    @Html.PagedListPager(Model, page => Url.Action("List", new { page }), new PagedListRenderOptions {
    LiElementClasses = new string[] { "page-item" },
    PageClasses = new string[] { "page-link" },
    DisplayLinkToFirstPage = PagedListDisplayMode.Never,
    DisplayLinkToLastPage = PagedListDisplayMode.Never,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always,
    MaximumPageNumbersToDisplay = 5
    })
</div>